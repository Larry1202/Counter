{"version":3,"sources":["font/Avenir/Avenir-Black.woff","components/Counter.jsx","App.js","index.js"],"names":["Counter","props","decrement","state","count","min","setState","inputValue","toString","handleChangeCount","increment","max","handleBlur","num","parseInt","isNaN","undefined","onCountChange","handleChangeInput","target","value","prevProps","this","children","Component","defaultProps","style","className","id","onClick","input","onChange","onBlur","Infinity","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAAe,I,MCKTA,E,kDACF,WAAaC,GAAQ,IAAD,8BAChB,cAAMA,IAoBRC,UAAY,WACQ,EAAKC,MAAfC,OACQ,EAAKH,MAAbI,KAMR,EAAKC,UACH,SAAAH,GACE,IAAMC,EAAQD,EAAMC,MAAQ,EAC5B,MAAO,CACLA,QACAG,WAAYH,EAAMI,cAGtB,EAAKC,oBArCS,EAyClBC,UAAY,WACQ,EAAKP,MAAfC,OACQ,EAAKH,MAAbU,KAMR,EAAKL,UACH,SAAAH,GACE,IAAMC,EAAQD,EAAMC,MAAQ,EAE5B,MAAO,CACLA,QACAG,WAAYH,EAAMI,cAGtB,EAAKC,oBA1DS,EA8DlBG,WAAc,WACZ,MAA8B,EAAKT,MAA3BI,EAAR,EAAQA,WAAYH,EAApB,EAAoBA,MAChBS,EAAMC,SAASP,GAEnBM,GADAA,EAAMA,EAAM,EAAKZ,MAAMU,IAAM,EAAKV,MAAMU,IAAME,GAClC,EAAKZ,MAAMI,IAAM,EAAKJ,MAAMI,IAAMQ,GAE3B,IAAfE,MAAMF,GACR,EAAKP,SAAS,CAAEC,WAAYH,IAG5B,EAAKE,SACH,CACEF,MAAOS,EACPN,WAAYM,EAAIL,YAElB,EAAKC,oBA7EO,EAkFlBA,kBAAoB,gBACeO,IAA7B,EAAKf,MAAMgB,eACb,EAAKhB,MAAMgB,cAAc,EAAKd,MAAMC,QApFtB,EAwFlBc,kBAAoB,YAAuC,IAAnBX,EAAkB,EAAnCY,OAAUC,MAC/B,EAAKd,SAAS,CAAEC,gBAtFhB,EAAKJ,MAAQ,CACXC,MAAO,EAAKH,MAAMG,MAClBG,WAAY,EAAKN,MAAMG,OALT,E,sDASlB,SAAoBiB,GACdA,EAAUjB,QAAUkB,KAAKrB,MAAMG,OACjCkB,KAAKhB,SACH,CACEF,MAAOkB,KAAKrB,MAAMG,MAClBG,WAAYe,KAAKrB,MAAMG,MAAMI,YAE/Bc,KAAKb,qB,oBA6Eb,WACI,OAAOa,KAAKrB,MAAMsB,SAAS,CACvBrB,UAAWoB,KAAKpB,UAChBgB,kBAAmBI,KAAKJ,kBACxBN,WAAYU,KAAKV,WACjBF,UAAWY,KAAKZ,UAChBP,MAAOmB,KAAKnB,Y,GApGFqB,aA6IdxB,EAAQyB,aAAe,CACnBF,SArCmB,SAAC,GAAD,IACnBrB,EADmB,EACnBA,UACAgB,EAFmB,EAEnBA,kBACAN,EAHmB,EAGnBA,WACAF,EAJmB,EAInBA,UACSH,EALU,EAKnBJ,MAASI,WALU,EAMnBmB,MANmB,OASvB,qBAAKC,UAAU,UAAf,SACI,sBAAKA,UAAU,UAAf,UAEA,wBAAQC,GAAG,YACXC,QAAS3B,EADT,eAKA,uBACA4B,MAAM,OACNF,GAAG,QACHR,MAAOb,EACPwB,SAAUb,EACVc,OAAQpB,IAIR,wBACAgB,GAAG,YACHC,QAASnB,EAFT,qBAYAN,MAAO,EACPO,IAAKsB,IACL5B,KAAM4B,KAWHjC,QCjJAkC,MAZf,WACE,OACE,mCAGA,cAAC,EAAD,CACA7B,IAAK,EACLM,IAAK,SCLTwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.47a8208e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Avenir-Black.7f911333.woff\";","import React,{Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './counter.css'\r\nimport '../font/Avenir/Avenir-Black.woff'\r\n\r\nclass Counter extends Component{\r\n    constructor (props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          count: this.props.count,\r\n          inputValue: this.props.count,\r\n        };\r\n      }\r\n    \r\n      componentDidUpdate (prevProps) {\r\n        if (prevProps.count !== this.props.count) {\r\n          this.setState(\r\n            {\r\n              count: this.props.count,\r\n              inputValue: this.props.count.toString(),\r\n            },\r\n            this.handleChangeCount\r\n          );\r\n        }\r\n      }\r\n    \r\n      decrement = () => {\r\n        const { count } = this.state;\r\n        const { min } = this.props;\r\n    \r\n        if (count <= min) {\r\n          return;\r\n        }\r\n    \r\n        this.setState(\r\n          state => {\r\n            const count = state.count - 1;\r\n            return {\r\n              count,\r\n              inputValue: count.toString(),\r\n            };\r\n          },\r\n          this.handleChangeCount\r\n        );\r\n      };\r\n    \r\n      increment = () => {\r\n        const { count } = this.state;\r\n        const { max } = this.props;\r\n    \r\n        if (count >= max) {\r\n          return;\r\n        }\r\n    \r\n        this.setState(\r\n          state => {\r\n            const count = state.count + 1;\r\n    \r\n            return {\r\n              count,\r\n              inputValue: count.toString(),\r\n            };\r\n          },\r\n          this.handleChangeCount\r\n        );\r\n      };\r\n    \r\n      handleBlur  = () => {\r\n        const { inputValue, count } = this.state;\r\n        let num = parseInt(inputValue);\r\n        num = num > this.props.max ? this.props.max : num;\r\n        num = num < this.props.min ? this.props.min : num;\r\n    \r\n        if (isNaN(num) === true) {\r\n          this.setState({ inputValue: count });\r\n        }\r\n        else {\r\n          this.setState(\r\n            {\r\n              count: num,\r\n              inputValue: num.toString(),\r\n            },\r\n            this.handleChangeCount\r\n          );\r\n        }\r\n      };\r\n    \r\n      handleChangeCount = () => {\r\n        if (this.props.onCountChange !== undefined) {\r\n          this.props.onCountChange(this.state.count);\r\n        }\r\n      };\r\n    \r\n      handleChangeInput = ({ target: { value: inputValue }}) => {\r\n        this.setState({ inputValue });\r\n      };\r\n    \r\n\r\n    render (){\r\n        return this.props.children({\r\n            decrement: this.decrement,\r\n            handleChangeInput: this.handleChangeInput,\r\n            handleBlur: this.handleBlur,\r\n            increment: this.increment,\r\n            state: this.state,\r\n        })\r\n    }\r\n}\r\n\r\n        const renderChildren = ({\r\n            decrement,\r\n            handleChangeInput,\r\n            handleBlur,\r\n            increment,\r\n            state: { inputValue },\r\n            style,\r\n          }) => (\r\n\r\n        <div className=\"counter\">\r\n            <div className=\"wrapper\">\r\n\r\n            <button id=\"decrement\"\r\n            onClick={decrement}>\r\n                -\r\n            </button>\r\n\r\n            <input\r\n            input=\"text\"\r\n            id=\"count\"\r\n            value={inputValue}\r\n            onChange={handleChangeInput}\r\n            onBlur={handleBlur}\r\n            >\r\n            </input>\r\n            \r\n            <button\r\n            id=\"increment\"\r\n            onClick={increment} \r\n            >\r\n                +\r\n            </button>\r\n            </div>\r\n        </div>\r\n        );\r\n\r\n        Counter.defaultProps = {\r\n            children: renderChildren,\r\n            count: 1,\r\n            max: Infinity,\r\n            min: -Infinity,\r\n          };\r\n          \r\n          Counter.propTypes = {\r\n            count: PropTypes.number,\r\n            max: PropTypes.number,\r\n            min: PropTypes.number,\r\n            onCountChange: PropTypes.func,\r\n          };\r\n\r\n\r\nexport default Counter;","import Counter from './components/Counter';\n\n\n\nfunction App() {\n  return (\n    <>\n    {/* This min and max variable defines the minimum and the maximum value of the counter.\n    We can change these values as per our needs */}\n    <Counter\n    min={1}\n    max={1000} />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}